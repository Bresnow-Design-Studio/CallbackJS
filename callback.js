// Generated by CoffeeScript 1.7.1
(function() {
  var Callback, custom;

  custom = {};

  Callback = (function() {
    function Callback(callback) {
      if (!callback) {
        return void 0;
      }
      if (callback.constructor !== Function) {
        throw new Error("Not a callback, bro");
      }
      this.callback = callback;
      this.fired = [];
      this.cancelled = false;
      this["this"] = null;
      this.pass = null;
      this.conditional = null;
      this.error = null;
    }

    Callback.prototype.config = function(vars) {
      var property;
      if (typeof vars !== 'object') {
        return false;
      }
      for (property in vars) {
        if (this.hasOwnProperty(property)) {
          this[property] = vars[property];
        }
      }
      return this;
    };

    Callback.prototype.cancel = function(arg) {
      if (arg == null) {
        arg = null;
      }
      if (arg === null) {
        this.cancelled = true;
      } else {
        new Callback((function(_this) {
          return function() {
            return _this.cancelled = true;
          };
        })(this)).when(arg);
      }
      return this;
    };

    Callback.prototype.renew = function(arg) {
      if (arg == null) {
        arg = null;
      }
      if (arg === null) {
        this.cancelled = false;
      } else {
        new Callback((function(_this) {
          return function() {
            return _this.cancelled = false;
          };
        })(this)).when(arg);
      }
      return this;
    };

    Callback.prototype["catch"] = function(callback) {
      if (!callback) {
        return;
      }
      this.error = callback;
      return this;
    };

    Callback.prototype.when = function(target, event) {
      var repeat, time;
      if (!target) {
        return;
      }
      switch (target.constructor) {
        case String:
          if (!custom[target]) {
            custom[target] = new Array();
          }
          custom[target].push(this);
          break;
        case Number:
          time = target;
          repeat = event;
          if (repeat) {
            setInterval(((function(_this) {
              return function() {
                return _this.invoke();
              };
            })(this)), time);
          } else {
            setTimeout(((function(_this) {
              return function() {
                return _this.invoke();
              };
            })(this)), time);
          }
          break;
        default:
          if (typeof target.addEventListener === "function") {
            target.addEventListener(event, (function(_this) {
              return function(event) {
                return _this.invoke(event);
              };
            })(this));
          }
      }
      return this;
    };

    Callback.prototype["if"] = function(conditional) {
      if (typeof conditional !== 'function') {
        return false;
      }
      this.conditional = conditional;
      return this;
    };

    Callback.prototype.invoke = function(arg) {
      var condition, error;
      if (arg == null) {
        arg = null;
      }
      if (this.cancelled) {
        return false;
      }
      if (this.conditional) {
        condition = this.conditional();
        if (!condition) {
          return condition;
        }
      }
      try {
        if ((this['this'] != null) && (this.pass != null)) {
          this.callback.call(this['this'], this.pass);
        } else if ((this['this'] != null) && (arg != null)) {
          this.callback.call(this['this'], arg);
        } else if ((this['this'] != null) && !arg) {
          this.callback.call(this['this']);
        } else if (this.pass != null) {
          this.callback(this.pass);
        } else if (arg != null) {
          this.callback(arg);
        } else {
          this.callback();
        }
        this.fired.push(new Date());
      } catch (_error) {
        error = _error;
        if (this.error) {
          this.error(error);
        } else {
          throw error;
        }
      }
      return this;
    };

    return Callback;

  })();

  Callback.fire = function(event) {
    var callback, _i, _len, _ref;
    if (typeof event !== 'string') {
      return;
    }
    if (!custom[event]) {
      return;
    }
    _ref = custom[event];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      callback = _ref[_i];
      try {
        callback.invoke();
      } catch (_error) {}
    }
    return custom[event];
  };

  this.Callback = Callback;

}).call(this);
