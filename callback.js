// Generated by CoffeeScript 1.7.1
(function() {
  var Callback;

  Callback = (function() {
    function Callback(callback) {
      if (!callback) {
        return void 0;
      }
      if (callback.constructor === String) {
        return console.log("Return a custom event");
      }
      if (callback.constructor !== Function) {
        throw new Error("Not a function, bro");
      }
      this.callback = callback;
      this.fired = [];
      this.cancelled = false;
      this.pass = [];
      this["this"] = null;
      this.conditional = null;
      this.error = null;
    }

    Callback.prototype.config = function(vars) {
      var constructor, property;
      if (typeof vars !== 'object') {
        throw new Error("You didn't give an object.");
      }
      for (property in vars) {
        constructor = vars[property].constructor;
        switch (property) {
          case "fired":
            return false;
          case "callback":
            if (constructor !== Function) {
              return false;
            }
            break;
          case "conditional":
            if (constructor !== Function) {
              return false;
            }
            break;
          case "error":
            if (constructor !== Function) {
              return false;
            }
            break;
          case "cancelled":
            if (constructor !== Boolean) {
              return false;
            }
            break;
          case "pass":
            if (constructor !== Array) {
              return false;
            }
        }
        if (this.hasOwnProperty(property)) {
          this[property] = vars[property];
        }
      }
      return this;
    };

    Callback.prototype.cancel = function(arg) {
      if (arg == null) {
        arg = false;
      }
      if (arg === false) {
        this.cancelled = true;
      }
      return this;
    };

    return Callback;

  })();

  this.Callback = Callback;

}).call(this);
